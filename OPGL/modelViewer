import sys
import os
from math import *
import xml.etree.ElementTree as xml
from cStringIO import StringIO
from PyQt4 import QtCore, QtGui, QtOpenGL, uic
#from PyQt5 import QtWidgets, QtCore, QtGui, QtOpenGL, uic
try:
    from OpenGL import GL
    from OpenGL import GLU
except ImportError:
    app = QtGui.QApplication(sys.argv)
    QtGui.QMessageBox.critical(None, "OpenGL hellogl",
            "PyOpenGL must be installed to run this example.")
    sys.exit(1)

def loadUiType(uiFile):
    parsed = xml.parse(uiFile)
    widget_class = parsed.find('widget').get('class')
    form_class = parsed.find('class').text

    with open(uiFile, 'r') as f:
        o = StringIO()
        frame = {}

        uic.compileUi(f, o, indent=0)
        pyc = compile(o.getvalue(), '<string>', 'exec')
        exec pyc in frame

        # Fetch the base_class and form class based on their type
        # in the xml from designer
        form_class = frame['Ui_%s' % form_class]
        try:
            base_class = eval('QtGui.%s' % widget_class)
        except:
            base_class = eval('QtWidgets.%s' % widget_class)

    return form_class, base_class

ui_base, ui_form = loadUiType(r'D:\project\modelViewer\ui\ui_modelViewer.ui')

class Window(ui_base, ui_form):
    def __init__(self):
        super(Window, self).__init__()
        self.setupUi(self)
        self.openglLayout = GLWidget()
        self.verticalLayout_opengl.addWidget(self.openglLayout)

    # def __init__(self):
    #     super(Window, self).__init__()
    #
    #     self.glWidget = GLWidget()
    #
    #     self.xSlider = self.createSlider()
    #     self.ySlider = self.createSlider()
    #     self.zSlider = self.createSlider()
    #
    #     self.xSlider.valueChanged.connect(self.glWidget.setXRotation)
    #     self.glWidget.xRotationChanged.connect(self.xSlider.setValue)
    #     self.ySlider.valueChanged.connect(self.glWidget.setYRotation)
    #     self.glWidget.yRotationChanged.connect(self.ySlider.setValue)
    #     self.zSlider.valueChanged.connect(self.glWidget.setZRotation)
    #     self.glWidget.zRotationChanged.connect(self.zSlider.setValue)
    #
    #     mainLayout = QtGui.QHBoxLayout()
    #     mainLayout.addWidget(self.glWidget)
    #     mainLayout.addWidget(self.xSlider)
    #     mainLayout.addWidget(self.ySlider)
    #     mainLayout.addWidget(self.zSlider)
    #     self.setLayout(mainLayout)
    #
    #     self.xSlider.setValue(15 * 16)
    #     self.ySlider.setValue(345 * 16)
    #     self.zSlider.setValue(0 * 16)
    #
    #     self.setWindowTitle("Hello GL")
    #
    # def createSlider(self):
    #     slider = QtGui.QSlider(QtCore.Qt.Vertical)
    #
    #     slider.setRange(0, 360 * 16)
    #     slider.setSingleStep(16)
    #     slider.setPageStep(15 * 16)
    #     slider.setTickInterval(15 * 16)
    #     slider.setTickPosition(QtGui.QSlider.TicksRight)
    #
    #     return slider

class ObjLoader(object):
    def __init__(self, fileName):
        self.vertices = []
        self.faces = []
        ##
        try:
            f = open(fileName)
            for line in f:
                if line[:2] == "v ":
                    index1 = line.find(" ") + 1
                    index2 = line.find(" ", index1 + 1)
                    index3 = line.find(" ", index2 + 1)

                    vertex = (float(line[index1:index2]), float(line[index2:index3]), float(line[index3:-1]))
                    vertex = (round(vertex[0], 2), round(vertex[1], 2), round(vertex[2], 2))
                    self.vertices.append(vertex)

                elif line[0] == "f":
                    string = line.replace("//", "/")
                    ##
                    i = string.find(" ") + 1
                    face = []
                    for item in range(string.count(" ")):
                        if string.find(" ", i) == -1:
                            face.append(string[i:-1])
                            break
                        face.append(string[i:string.find(" ", i)])
                        i = string.find(" ", i) + 1
                    ##
                    self.faces.append(tuple(face))

            f.close()
        except IOError:
            print(".obj file not found.")

class GLWidget(QtOpenGL.QGLWidget):
    xRotationChanged = QtCore.pyqtSignal(int)
    yRotationChanged = QtCore.pyqtSignal(int)
    zRotationChanged = QtCore.pyqtSignal(int)

    def __init__(self, parent=None):
        super(GLWidget, self).__init__(parent)
        objPath = r'C:\Users\dd901\Desktop\sp\testCube_quads.obj'
        self.geo = ObjLoader(objPath)

        self.object = 0
        self.xRot = 0
        self.yRot = 0
        self.zRot = 0
        self.zPos = 5

        self.lastPos = QtCore.QPoint()

        self.trolltechGreen = QtGui.QColor.fromRgb(240, 240, 240, 1.0)
        self.trolltechPurple = QtGui.QColor.fromRgb(180, 180, 255, 1.0)

    def minimumSizeHint(self):
        return QtCore.QSize(50, 50)

    def sizeHint(self):
        return QtCore.QSize(400, 400)

    def setXRotation(self, angle):
        angle = self.normalizeAngle(angle)
        if angle != self.xRot:
            self.xRot = angle
            self.xRotationChanged.emit(angle)
            self.updateGL()

    def setYRotation(self, angle):
        angle = self.normalizeAngle(angle)
        if angle != self.yRot:
            self.yRot = angle
            self.yRotationChanged.emit(angle)
            self.updateGL()

    def setZRotation(self, angle):
        angle = self.normalizeAngle(angle)
        if angle != self.zRot:
            self.zRot = angle
            self.zRotationChanged.emit(angle)
            self.updateGL()

    def initializeGL(self):
        self.qglClearColor(self.trolltechPurple.dark())
        self.object = self.render_scene()
        GL.glShadeModel(GL.GL_FLAT)
        GL.glEnable(GL.GL_DEPTH_TEST)
        GL.glEnable(GL.GL_CULL_FACE)

    def paintGL(self):
        GL.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)
        GL.glLoadIdentity()
        GL.glTranslated(0.0, 0.0, 0.0)
        GL.glRotated(self.xRot / 16.0, 1.0, 0.0, 0.0)
        GL.glRotated(self.yRot / 16.0, 0.0, 1.0, 0.0)
        GL.glRotated(self.zRot / 16.0, 0.0, 0.0, 1.0)
        GL.glCallList(self.object)

    def resizeGL(self, width, height):
        side = min(width, height)
        if side < 0:
            return

        GL.glViewport((width - side) // 2, (height - side) // 2, side, side)

        GL.glMatrixMode(GL.GL_PROJECTION)
        GL.glLoadIdentity()

        GLU.gluPerspective(35, 1, 0.01, 1000)
        GLU.gluLookAt(0, 0, self.zPos, 0, 0, 0, 0, 1, 0)

        GL.glMatrixMode(GL.GL_MODELVIEW)
        self.updateGL()

    def mousePressEvent(self, event):
        self.lastPos = event.pos()

    def mouseMoveEvent(self, event):
        dx = event.x() - self.lastPos.x()
        dy = event.y() - self.lastPos.y()

        if event.buttons() & QtCore.Qt.LeftButton:
            self.setXRotation(self.xRot + 8 * dy)
            self.setYRotation(self.yRot + 8 * dx)
        elif event.buttons() & QtCore.Qt.RightButton:
            self.setXRotation(self.xRot + 8 * dy)
            self.setZRotation(self.zRot + 8 * dx)

        self.lastPos = event.pos()

    def wheelEvent(self, event):
        if event.delta() > 0:
            self.zPos += -0.5
        elif event.delta() < 0:
            self.zPos += +0.5

        self.resizeGL(self.width(), self.height())

    def makeObject(self):
        genList = GL.glGenLists(1)
        GL.glNewList(genList, GL.GL_COMPILE)

        GL.glBegin(GL.GL_QUADS)

        x1 = +0.06
        y1 = -0.14
        x2 = +0.14
        y2 = -0.06
        x3 = +0.08
        y3 = +0.00
        x4 = +0.30
        y4 = +0.22

        self.quad(x1, y1, x2, y2, y2, x2, y1, x1)
        self.quad(x3, y3, x4, y4, y4, x4, y3, x3)

        self.extrude(x1, y1, x2, y2)
        self.extrude(x2, y2, y2, x2)
        self.extrude(y2, x2, y1, x1)
        self.extrude(y1, x1, x1, y1)
        self.extrude(x3, y3, x4, y4)
        self.extrude(x4, y4, y4, x4)
        self.extrude(y4, x4, y3, x3)

        NumSectors = 200

        for i in range(NumSectors):
            angle1 = (i * 2 * math.pi) / NumSectors
            x5 = 0.30 * math.sin(angle1)
            y5 = 0.30 * math.cos(angle1)
            x6 = 0.20 * math.sin(angle1)
            y6 = 0.20 * math.cos(angle1)

            angle2 = ((i + 1) * 2 * math.pi) / NumSectors
            x7 = 0.20 * math.sin(angle2)
            y7 = 0.20 * math.cos(angle2)
            x8 = 0.30 * math.sin(angle2)
            y8 = 0.30 * math.cos(angle2)

            self.quad(x5, y5, x6, y6, x7, y7, x8, y8)

            self.extrude(x6, y6, x7, y7)
            self.extrude(x8, y8, x5, y5)

        GL.glEnd()
        GL.glEndList()

        return genList

    def render_scene(self):
        if len(self.geo.faces) > 0:

            genList = GL.glGenLists(1)
            GL.glNewList(genList, GL.GL_COMPILE)

            GL.glBegin(GL.GL_QUADS)
            # GL.glBegin(GL.GL_TRIANGLES)

            for face in self.geo.faces:
                for f in face:
                    f = f.split('/')[0]
                    vertexDraw = self.geo.vertices[int(f) - 1]
                    if int(f) % 4 == 1:
                        GL.glColor4f(0.282, 0.239, 0.545, 0.35)
                    elif int(f) % 4 == 2:
                        GL.glColor4f(0.729, 0.333, 0.827, 0.35)
                    else:
                        GL.glColor4f(0.545, 0.000, 0.545, 0.35)
                    GL.glVertex3fv(vertexDraw)

            GL.glEnd()

            GL.glEndList()
            return genList

    def quad(self, x1, y1, x2, y2, x3, y3, x4, y4):
        self.qglColor(self.trolltechGreen)

        GL.glVertex3d(x1, y1, -0.05)
        GL.glVertex3d(x2, y2, -0.05)
        GL.glVertex3d(x3, y3, -0.05)
        GL.glVertex3d(x4, y4, -0.05)

        GL.glVertex3d(x4, y4, +0.05)
        GL.glVertex3d(x3, y3, +0.05)
        GL.glVertex3d(x2, y2, +0.05)
        GL.glVertex3d(x1, y1, +0.05)

    def extrude(self, x1, y1, x2, y2):
        self.qglColor(self.trolltechGreen.dark(250 + int(100 * x1)))

        GL.glVertex3d(x1, y1, +0.05)
        GL.glVertex3d(x2, y2, +0.05)
        GL.glVertex3d(x2, y2, -0.05)
        GL.glVertex3d(x1, y1, -0.05)

    def normalizeAngle(self, angle):
        while angle < 0:
            angle += 360 * 16
        while angle > 360 * 16:
            angle -= 360 * 16
        return angle


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()

    sys.exit(app.exec_())
